# =============================================================================
# RESTMonkey Configuration: Trace Logging & Hot Reload Test
# =============================================================================
#
# Purpose: Advanced configuration for testing hot reload and detailed logging
# Used by: LoggingDemoTest.java and hot reload functionality tests
#
# Key Features Tested:
# - Hot reload functionality (file watcher monitors this config)
# - TRACE level logging for maximum detail visibility
# - Artificial latency for timing analysis
# - Template rendering with authentication
# - File-based logging with detailed request/response traces
#
# Hot Reload Behavior:
# - File watcher monitors this file for changes
# - Configuration changes trigger automatic server reload
# - Routes, resources, and settings updated without restart
# - Validation errors during reload preserve previous config
#
# Logging Features:
# - TRACE level: Shows every internal operation
# - HTTP request/response logging with timing
# - File logging enabled for persistent audit trail
# - Artificial latency: 50ms added to see timing in logs
#
# Configuration Details:
# - Port 0: Auto-assign free port for test isolation
# - Hot Reload: ENABLED - watches for file changes
# - Templating: ENABLED - processes {{...}} expressions
# - Schema Validation: STRICT - must be perfectly valid
# =============================================================================

port: 0                   # 0 = auto-assign a free port
authToken: test-token     # omit or "" to disable auth
artificialLatencyMs: 50   # Add some latency to see timing logs
chaosFailRate: 0.0        # 0..1 chance of random 500s

logging:
  level: TRACE            # TRACE, DEBUG, INFO, WARN, ERROR
  httpRequests: true      # log HTTP requests/responses
  enableFileLogging: true # write logs to files
  logDirectory: logs      # directory for log files

features:
  templating: true        # enable {{...}} templating
  hotReload: true         # watch for config file changes
  schemaValidation: strict # strict|lenient
  recordReplay:
    mode: off             # off | record | replay
    file: target/test-recordings.jsonl
    replayOnMiss: fallback

resources:
  - name: users
    idField: id           # default field for unique IDs
    enableCrud: true      # auto-generate REST endpoints
    seed:                 # initial data
      - id: "1"
        name: "Alice"
        email: "alice@example.com"
        role: "admin"
      - id: "2"
        name: "Bob"
        email: "bob@example.com"
        role: "user"

staticEndpoints:
  - path: /health
    method: GET           # default: GET
    status: 200           # default: 200
    response:
      status: "healthy"
      timestamp: "{{now}}"
      version: "1.0.0"
      uptime: "{{now}}"
      
  - path: /echo
    method: POST
    status: 200
    echoRequest: true     # return request details
    
  - path: /slow
    method: GET
    status: 200
    response:
      message: "This endpoint has artificial latency"
      timestamp: "{{now}}"
